; -----------------------------------------------------------------------
; Template source file generated by piklab
    #include <p16f690.inc>

; -----------------------------------------------------------------------
; Configuration bits: adapt to your setup and needs
    __CONFIG _INTOSCIO & _WDT_OFF & _PWRTE_OFF & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _BOR_ON & _IESO_ON & _FCMEN_ON

; -----------------------------------------------------------------------
; Változó értékadás
INT_VAR UDATA_SHR
w_saved      RES 1 ; variable used for context saving
status_saved RES 1 ; variable used for context saving
pclath_saved RES 1 ; variable used for context saving

time1		RES 1
time2		RES 1
time3		RES 1
porttmp		RES 1
motorstate	RES 1
stepbit		RES 1
stepxor		RES 1
positionhi	RES 1
positionlo	RES 1



var1         RES 1 ; példa változó


; RA2	IN+PU	bumper sensor
; RA4	IN+PU	^button
; RC0	OUT	bumper opto LED
; RC1	OUT	LED
; RC2	OUT	lamp

; RC4	OUT	MOTOR orange
; RC5	OUT	MOTOR yellow
; RC6	OUT	MOTOR brown
; RC7	OUT	MOTOR black

; forward	= direction to PCB
; backward	= direction to bumper

; maximal position: 0x0718


; -----------------------------------------------------------------------
; reset vector
STARTUP CODE 0x000
    nop                    ; needed for ICD2 debugging
    movlw   high start     ; felső bájt betöltés a start cimkénél
    movwf   PCLATH         ; PCLATH induló érték
    goto    start          ; menj a start kódra

; megszakítás vektor
INT_VECTOR CODE 0x004
    goto    interrupt      ; menj a megszakítás start kódra

; relocatable code
PROG CODE
interrupt
    movwf   w_saved        ; környezet mentés
    swapf   STATUS,w
    movwf   status_saved
    movf    PCLATH,w       ; only required if using more than first page
    movwf   pclath_saved
    clrf    PCLATH
    ; << megszakítási kód helye >>
    movf    pclath_saved,w ; környezet visszatöltése
    movwf   PCLATH
    swapf   status_saved,w
    movwf   STATUS
    swapf   w_saved,f
    swapf   w_saved,w
    retfie

start
    ; << Fő kód helye >>
    movlw	b'00000011'		; motor off, lamp off, LED on, bumper opto LED on
    movwf	PORTC
    bsf		STATUS,RP1
    clrf	ANSEL			; all inputs are digital
    clrf	ANSELH
    bcf		STATUS,RP1
    bsf		STATUS,RP0
    movlw	b'00001000'		; define 6 outputs on PORTC
    movwf	TRISC
    bcf		WPUA,2			; RA2 no pull-up
    bcf		OPTION_REG,NOT_RABPU	; global enable pull-ups
    bcf		STATUS,RP0
    clrf	time1
    clrf	motorstate

initial					; move to initial position
    btfsc	PORTA,2			; bumped?
    goto	bumped
    call	stepbw
    goto	initial

bumped

waitForButton
    btfsc	PORTA,4
    goto	waitForButton
;    bsf		PORTC,2			; lamp on
    
    bsf		PORTC,2		; lamp on
    
    clrf	positionhi		; reset position
    clrf	positionlo
move1
    call	stepfw
    movlw	d'94'
    movwf	time3
delay3
    call	delay1
    decfsz	time3,f
    goto	delay3
    movlw	0x01
    xorwf	positionhi,w
    btfss	STATUS,Z
    goto	move1
;    movlw	0x40
;    xorwf	positionlo,w
;    btfss	STATUS,Z
;    goto	move1
    
    
    bcf		PORTC,2			; lamp off
    
    goto    $              ; örökké körbe
    
    
;    bcf		PORTC,0			; bumper opto LED off






    
    goto    $              ; örökké körbe

    






    movlw	0x10
    movwf	var1
cyc2
    call	stepfw
    decfsz	var1,f
    goto	cyc2

    goto    $         
    
cyc3
    call	stepfw
    call	delay1
    call	stepfw
    call	delay1
    goto	cyc3
    


    
    goto    $              ; örökké körbe


    
delay1
    clrw
delay
    movwf	time2
del1
    decfsz	time1,f
    goto	del1
    decfsz	time2,f
    goto	del1
    return

stepfw					; one step forward
    movlw	b'00010000'
    movwf	stepbit
    movlw	b'00110000'
    movwf	stepxor
    incf	positionhi,f		; increment position counter
    incfsz	positionlo,f
    decf	positionhi,f
    goto	stepp
stepbw					; one step backward
    movlw	b'10000000'
    movwf	stepbit
    movlw	b'11000000'
    movwf	stepxor
    decf	positionhi,f		; decrement position counter
    decf	positionlo,f
    incfsz	positionlo,w
    incf	positionhi,f
stepp					; the stepping itself
    movf	PORTC,w
    movwf	porttmp
    iorwf	stepbit,w
    btfsc	motorstate,0
    xorwf	stepxor,w
    movwf	PORTC
    call	stepdelay
    movf	porttmp,w
    movwf	PORTC
    comf	motorstate,f		; changing the motor state value
    return
stepdelay
    movlw	0x20			; motor pulse
    call	delay
    return
    
    
    
END
